name: Docker Publish (Prod)

# This workflow is triggered on a push to a tag matching 'v.*'
# Example: v.250930
on:
  push:
    tags:
      - 'v.*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debug workspace
        run: ls ./

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # 5. Get Code Artifact token
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Get and save Auth Token for CodeArtifact
        id: get-save-codeartifact-auth-token
        run: |
          aws codeartifact get-authorization-token --domain wafflestudio --domain-owner 405906814034 --query authorizationToken --region ap-northeast-1 --output text > .codeartifact-auth-token

      - name: Export CodeArtifact Auth Token
        run: |
          echo "CODEARTIFACT_AUTH_TOKEN=$(cat .codeartifact-auth-token)" >> $GITHUB_ENV

      # 6. Build the application with Gradle
      - name: Build with Gradle
        run: ./gradlew build
        env:
          codeArtifactAuthToken: ${{ env.CODEARTIFACT_AUTH_TOKEN }}

      # 7. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 8. Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 9. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 10. Build and push multi-architecture Docker image
      - name: Build and push multi-architecture image to ECR
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg JAR_FILE=build/libs/*.jar \
            -t ${{ secrets.ECR_URI }}/internhasha-prod/internhasha-server:latest \
            -t ${{ secrets.ECR_URI }}/internhasha-prod/internhasha-server:${{ github.ref_name }} \
            --push .
